{"version":3,"sources":["component/Navbar.js","component/TextForm.js","component/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","htmfor","TextForm","useState","text","setText","style","backgroundColor","color","heading","value","onChange","event","target","rows","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","join","reverseString","reverse","length","Alert","alert","role","word","lower","charAt","slice","capitalize","message","App","setMode","setAlert","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"4MAIe,SAASA,EAAOC,GAC7B,OACE,8BACE,qBAAKC,UAAS,yCAAoCD,EAAME,KAA1C,eAAqDF,EAAME,MAAzE,SACE,sBAAKD,UAAU,kBAAf,UACE,mBAAGA,UAAU,eAAeE,KAAK,IAAjC,SAEGH,EAAMI,QAET,wBAAQH,UAAU,iBAAiBI,KAAK,SAAS,iBAAe,WAAW,iBAAe,0BAA0B,gBAAc,yBAAyB,gBAAc,QAAQ,aAAW,oBAA5L,SACE,sBAAMJ,UAAU,0BAElB,sBAAKA,UAAU,2BAA2BK,GAAG,yBAA7C,UACE,oBAAIL,UAAU,kCAAd,SACE,oBAAIA,UAAU,WAAd,SACE,mBAAGA,UAAU,kBAAkB,eAAa,OAAOE,KAAK,IAAxD,sBAeJ,sBAAKF,UAAS,sCAAgD,UAAfD,EAAME,KAAmB,OAAS,SAAjF,UACE,uBAAOD,UAAU,mBAAmBM,QAASP,EAAMQ,WAAYH,KAAK,WAAWC,GAAG,2BAClF,wBAAOL,UAAU,mBAAmBQ,OAAO,yBAA3C,oBACyB,UAAfT,EAAME,KAAmB,OAAS,QAD5C,wBClCC,SAASQ,EAASV,GAC/B,IAsCA,EAAwBW,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAEA,OACE,qCACE,sBAAKZ,UAAU,YAAYa,MAAO,CAAEC,gBAAgC,UAAff,EAAME,KAAmB,QAAU,UAAWc,MAAsB,SAAfhB,EAAME,KAAkB,QAAU,SAA5I,UACE,mCAAMF,EAAMiB,WACZ,qBAAKhB,UAAU,OAAf,SACE,0BAAUA,UAAU,eAAeiB,MAAON,EAAME,MAAO,CAAEC,gBAAgC,UAAff,EAAME,KAAmB,QAAU,OAAQc,MAAsB,SAAfhB,EAAME,KAAkB,QAAU,SAAWiB,SAX1J,SAACC,GACtBP,EAAQO,EAAMC,OAAOH,QAUoLZ,GAAG,QAAQgB,KAAK,QAErN,wBAAQrB,UAAU,uBAAuBM,QA/CzB,WACpB,IAAIgB,EAAUX,EAAKY,cACnBX,EAAQU,GACRvB,EAAMyB,UAAU,0BAA2B,YA4CvC,mCAGA,wBAAQxB,UAAU,uBAAuBM,QA5CxB,WACrB,IAAIgB,EAAUX,EAAKc,cACnBb,EAAQU,GACRvB,EAAMyB,UAAU,0BAA2B,YAyCvC,mCAGA,yBAASxB,UAAU,uBAAuBM,QAzCvB,WAEvBM,EADc,IAEdb,EAAMyB,UAAU,eAAgB,YAsC5B,wBAGA,yBAASxB,UAAU,uBAAuBM,QAtCxB,WACtB,IAAIK,EAAOe,SAASC,eAAe,SACnChB,EAAKiB,SACLC,UAAUC,UAAUC,UAAUpB,EAAKM,QAmC/B,uBAGA,yBAASjB,UAAU,uBAAuBM,QAnClB,WAC5B,IAAIgB,EAAUX,EAAKqB,MAAM,QACzBpB,EAAQU,EAAQW,KAAK,OAiCjB,gCAGA,yBAASjC,UAAU,uBAAuBM,QAjCtB,WACxB,IACI4B,EADUvB,EAAKqB,MAAM,IACGG,UAC5BvB,EAAQsB,EAAcD,KAAK,MA8BvB,6BAIF,sBAAKjC,UAAU,sBAAsBa,MAAO,CAAEC,gBAAgC,UAAff,EAAME,KAAmB,QAAU,UAAWc,MAAsB,SAAfhB,EAAME,KAAkB,QAAU,SAAtJ,UACE,mDACA,mDACqBU,EAAKqB,MAAM,KAAKI,OADrC,6BACuEzB,EAAKyB,OAAQ,OAEpF,kCAAK,KAAQzB,EAAKqB,MAAM,KAAKI,OAA7B,sBACA,yCACA,4BAAIzB,EAAKyB,OAAS,EAAIzB,EAAO,0CC3DtB0B,MAff,SAAetC,GAKb,OACEA,EAAMuC,OACJ,sBAAKtC,UAAS,sBAAiBD,EAAMuC,MAAMlC,KAA7B,gCAAiEmC,KAAK,QAApF,UACE,mCAPa,SAACC,GAClB,IAAMC,EAAQD,EAAKf,cACnB,OAAOgB,EAAMC,OAAO,GAAGnB,cAAgBkB,EAAME,MAAM,GAKtCC,CAAW7C,EAAMuC,MAAMlC,MAAhC,QACA,uCAAUL,EAAMuC,MAAMO,QAAtB,WC2COC,MA9Cf,SAAa/C,GACX,MAAwBW,mBAAS,SAAjC,mBAAOT,EAAP,KAAa8C,EAAb,KACA,EAA0BrC,mBAAS,MAAnC,mBAAO4B,EAAP,KAAcU,EAAd,KAEMxB,EAAY,SAACqB,EAASzC,GAC1B4C,EAAS,CACPH,QAASA,EACTzC,KAAMA,IAER6C,YAAW,WACTD,EAAS,QACR,MAeL,OACE,qCAEE,cAAClD,EAAD,CAAQK,MAAM,YAAYF,KAAMA,EAAMM,WAfvB,WACJ,UAATN,GACF8C,EAAQ,QACRrB,SAASwB,KAAKrC,MAAMC,gBAAkB,UACtCU,EAAU,6BAA8B,aAExCuB,EAAQ,SACRrB,SAASwB,KAAKrC,MAAMC,gBAAkB,QACtCU,EAAU,8BAA+B,eAQzC,cAAC,EAAD,CAAOc,MAAOA,IACd,qBAAKtC,UAAU,iBAAf,SAME,cAACS,EAAD,CAAUe,UAAWA,EAAWR,QAAQ,4BAA4Bf,KAAMA,UCjCnEkD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFpC,SAASC,eAAe,SAM1BwB,K","file":"static/js/main.0260b03f.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n// import { Link } from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <div>\r\n      <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"#\">\r\n            {/* <Link className=\"navbar-brand\" to=\"/\"> */}\r\n            {props.title}\r\n          </a>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">\r\n                  {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\"> */}\r\n                  Home\r\n                </a>\r\n              </li>\r\n              {/* <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to=\"/about\">               \r\n                  About\r\n                </Link>\r\n              </li> */}\r\n            </ul>\r\n            {/* <form className=\"d-flex\">\r\n                 <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                  <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n            </form> */}\r\n            <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'light'}`}>\r\n              <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\" />\r\n              <label className=\"form-check-label\" htmfor=\"flexSwitchCheckDefault\">\r\n                ENABLE {props.mode === 'light' ? 'DARK' : 'LIGHT'} MODE\r\n              </label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </div>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n};\r\n","import React, { useState } from 'react';\r\n\r\nexport default function TextForm(props) {\r\n  const handleUpClick = () => {\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert('Converted to Upper Case', 'success');\r\n  };\r\n\r\n  const handleLowClick = () => {\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert('Converted to Lower Case', 'success');\r\n  };\r\n\r\n  const handleClearClick = () => {\r\n    let newText = '';\r\n    setText(newText);\r\n    props.showAlert('cleared Text', 'success');\r\n  };\r\n\r\n  const handleCopyClick = () => {\r\n    var text = document.getElementById('myBox');\r\n    text.select();\r\n    navigator.clipboard.writeText(text.value);\r\n  };\r\n\r\n  const handleRemoveExtraText = () => {\r\n    var newText = text.split(/[ ]+/);\r\n    setText(newText.join(' '));\r\n  };\r\n\r\n  const handleReverseText = () => {\r\n    var newText = text.split('');\r\n    var reverseString = newText.reverse();\r\n    setText(reverseString.join(''));\r\n  };\r\n  const handleOnChange = (event) => {\r\n    setText(event.target.value);\r\n  };\r\n\r\n  const [text, setText] = useState('');\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container\" style={{ backgroundColor: props.mode === 'light' ? 'white' : '#042743', color: props.mode === 'dark' ? 'white' : 'black' }}>\r\n        <h1> {props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n          <textarea className=\"form-control\" value={text} style={{ backgroundColor: props.mode === 'light' ? 'white' : 'grey', color: props.mode === 'dark' ? 'white' : 'black' }} onChange={handleOnChange} id=\"myBox\" rows=\"8\"></textarea>\r\n        </div>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleUpClick}>\r\n          Convert to Upper Case\r\n        </button>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleLowClick}>\r\n          Convert to Lower Case\r\n        </button>\r\n        <buttopn className=\"btn btn-primary mx-1\" onClick={handleClearClick}>\r\n          Clear text\r\n        </buttopn>\r\n        <buttopn className=\"btn btn-primary mx-1\" onClick={handleCopyClick}>\r\n          Copy text\r\n        </buttopn>\r\n        <buttopn className=\"btn btn-primary mx-1\" onClick={handleRemoveExtraText}>\r\n          Remove extra Space\r\n        </buttopn>\r\n        <buttopn className=\"btn btn-primary mx-1\" onClick={handleReverseText}>\r\n          Reverse text\r\n        </buttopn>\r\n      </div>\r\n      <div className=\"container mx-3 my-3\" style={{ backgroundColor: props.mode === 'light' ? 'white' : '#042743', color: props.mode === 'dark' ? 'white' : 'black' }}>\r\n        <h2>Your Text Summery</h2>\r\n        <p>\r\n          Number of Words - {text.split(' ').length} , Number of Charecters - {text.length}{' '}\r\n        </p>\r\n        <p> {0.008 * text.split(' ').length} Minutes of Read</p>\r\n        <h2>PREVIEW</h2>\r\n        <p>{text.length > 0 ? text : 'Enter Something to the text box'}</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nfunction Alert(props) {\r\n  const capitalize = (word) => {\r\n    const lower = word.toLowerCase();\r\n    return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n  };\r\n  return (\r\n    props.alert && (\r\n      <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n        <strong>{capitalize(props.alert.type)} :</strong>\r\n        <strong> {props.alert.message} </strong>\r\n      </div>\r\n    )\r\n  );\r\n}\r\n\r\nexport default Alert;\r\n","import './App.css';\nimport About from './component/About';\nimport Navbar from './component/Navbar';\nimport TextForm from './component/TextForm';\nimport Alert from './component/Alert';\nimport React, { useState } from 'react';\n// import { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nfunction App(props) {\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      message: message,\n      type: type,\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 2000);\n  };\n\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = '#042743';\n      showAlert('Dark mode has been enables', 'success');\n    } else {\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert('Light mode has been enables', 'success');\n    }\n  };\n\n  return (\n    <>\n      {/* <Router> */}\n      <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n      <Alert alert={alert} />\n      <div className=\"container my-3\">\n        {/* <Switch>\n            <Route exact path=\"/about\">\n              <About />\n            </Route> */}\n        {/* <Route exact path=\"/\"> */}\n        <TextForm showAlert={showAlert} heading=\"Enter the text to analyze\" mode={mode} />\n        {/* </Route>\n          </Switch> */}\n      </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}